<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.ywork.salarybill.repository.SalaryBillAdminRepository">
	<!-- 定义的resultMap，可以解决类的属性名和数据库列名不一致的问题 -->
	<resultMap type="SalaryBillAdmin" id="salaryBillAdminResultMap">
		<id property="id" column="id"/>
		<result property="companyId" column="companyId"/>
		<result property="userId" column="userId"/>
		<result property="adminFlag" column="adminFlag"/>
		<result property="createDate" column="createDate"/>
		<result property="modifiedDate" column="modifiedDate"/>
	</resultMap>

	<!--所有字段列表 -->
	<sql id="fields">
		id,companyId,userId,adminFlag,createDate,modifiedDate
	</sql>

	<!--从实体中取值 -->
	<sql id="values">
		#{id},#{companyId},#{userId},#{adminFlag},#{createDate},#{modifiedDate}
	</sql>

	<!-- insert语句 -->
	<insert id="insert" parameterType="SalaryBillAdmin" useGeneratedKeys="false"
		keyProperty="id" keyColumn="id" >
		insert into SalaryBillAdmin(
		<include refid="fields"></include>
		)
		values(
		<include refid="values"></include>
		)
	</insert>

	<!-- update语句 -->
	<update id="update" parameterType="SalaryBillAdmin">
		Update SalaryBillAdmin Set adminFlag = #{adminFlag},modifiedDate = now()
		Where companyId = #{companyId} AND id = #{id}
	</update>


	<!-- 根据ID删除数据 -->
	<delete id="deleteById">
		delete from SalaryBillAdmin where companyId = #{corpId} And id=#{id}
	</delete>
	

	<!-- 根据ID查询实体 -->
	<select id="findById" resultType="SalaryBillAdmin">
		Select
		<include refid="fields"></include>
		from SalaryBillAdmin
		where companyId = #{corpId} And 
		      id = #{id}
	</select>
	
	<!-- 根据ID查询实体 -->
	<select id="isSalaryBillAdmin" resultType="SalaryBillAdmin">
		Select * from SalaryBillAdmin
		where companyId = #{companyId} And 
		      userId = #{userId}
	</select>
	

	<!-- 根据ID判断实体是否存在 -->
	<select id="exists" resultType="boolean">
		Select 1
		from SalaryBillAdmin where companyId = #{companyId} And id = #{id}
	</select>
	
	<!-- 根据salaryid查询集合 -->
	<select id="getSalaryBillAdmins" resultType="me.ywork.salarybill.model.SalaryBillAdminViewModel">
		Select e.fd_name as userName,u.fd_userid as userId,
		(case when IFNULL(a.adminFlag, '') = '' then 0 else a.adminFlag end) as adminFlag
		 from ding_org_user u 
		
		inner join ding_org_element e on e.fd_orgid = u.fd_orgid 
										and e.fd_dingid = u.fd_userid 
										and e.fd_org_type=8
										and e.fd_is_available = 1
										and u.fd_is_admin= 1
										and IFNULL(u.fd_is_sup_admin,0) = 0
										and u.fd_orgid = #{companyId}
		
		left join SalaryBillAdmin a on u.fd_orgid = a.companyid
		and u.fd_userid = a.userid
		and a.companyid = #{companyId} 
	</select>
	
	
	<select id="getAllSalaryAdmins" resultType="SalaryBillAdmin">
		Select * from SalaryBillAdmin where companyid = #{companyId} 
	</select>
	
	
	<update id="batchUpdateSalaryBillAdmins">
		Update SalaryBillAdmin Set adminFlag = 0,modifiedDate = now() Where companyId = #{companyId} ;
		<!-- 批量插入 -->
		<if test="insertAdmins != null and insertAdmins.size() != 0">
			insert into SalaryBillAdmin (<include refid="fields"></include>)
			    values
			    <foreach collection="insertAdmins" index="i" item="sb" open="" close="" separator=",">
			    	(
			    		#{sb.id},#{sb.companyId},#{sb.userId},#{sb.adminFlag},#{sb.createDate},#{sb.modifiedDate}
			    	)
			    </foreach>
			    ;
		</if>
		<!-- 批量更新-->
		<if test="updateAdmins != null and updateAdmins.size() !=0">
			Update SalaryBillAdmin Set adminFlag = 1  ,modifiedDate = now() Where companyId = #{companyId} and userId in
			    (
				    <foreach collection="updateAdmins" index="i" item="u" separator=",">
					    #{u.userId}
					</foreach>
				);
		</if>
	</update>
	
	
</mapper>